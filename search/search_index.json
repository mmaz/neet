{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MIT NEET Spring 2019","title":"MIT NEET Spring 2019"},{"location":"#mit-neet-spring-2019","text":"","title":"MIT NEET Spring 2019"},{"location":"neet_fall_2018/","text":"MIT NEET Fall 2018 Multiplex SSH This is highly recommended for connecting to the drones: Create or edit a file in the .ssh/ directory inside your home directory, called config : $ nano ~/.ssh/config or $ gedit ~/.ssh/config or $ vi ~/.ssh/config (or whichever text editor you are comfortable with) You will need to add two lines to the file, and you will need to replace PATH_TO_HOME with the correct path for your platform: on linux, /home/YOURTEAMNAME/.ssh/ (or your username, if you are not using a team laptop) on mac, /Users/YOURUSERNAME/.ssh windows, (TODO) Add the following two lines ( Remember: change PATH_TO_HOME as specified above): ControlMaster auto ControlPath PATH_TO_HOME/.ssh/ssh_mux_%h_%p_%r Important - remember to start your FIRST SSH connection with -Y if you plan to use xforwarding (e.g., for rqt_image_view ) Directory Setup These instructions replace this section on the website. On the SSH window on your team laptop, enter the following commands cd ~ cd ~/bwsi-uav/catkin_ws/src git clone https://github.com/BWSI-UAV/aero_control.git cd aero_control git remote add upstream https://github.com/BWSI-UAV/aero_control.git cd ~/bwsi-uav git clone https://github.com/BWSI-UAV/laboratory.git cd laboratory git remote add upstream https://github.com/BWSI-UAV/laboratory.git cd ~/bwsi-uav git clone https://github.com/BWSI-UAV/documents.git cd documents git remote add upstream https://github.com/BWSI-UAV/documents.git Compressed Camera Feeds To find if your drone supports compressed camera feeds: Start roscore Start optical flow: sudo -E ~/bwsi-uav/catkin-ws/src/aero-optical-flow/build/aero-optical-flow $ rostopic list | grep compressed If you don't see /aero_downward_camera/image/compressed in the results you will need to install compressed transport support: sudo apt-get install ros-kinetic-image-transport-plugins then restart your camera feed by restarting the aero-optical-flow binary (step 1 above). To record a compressed downward camera feed: $ cd ~/rosbags/ # or wherever you want to store your rosbag $ time rosbag record -O downward /aero_downward_camera/image/compressed # -O specifies the filename You can then SCP your rosbag to your team laptop. To convert compressed camera messages to OpenCV images, you can't use CVBridge. Here is an OpenCV-specific decoding solution. (You could also use CompressedImage from sensor_msgs.msg ): from __future__ import print_function import cv2 import numpy as np import roslib import rospy from sensor_msgs.msg import CompressedImage # We do not use cv_bridge since it does not support CompressedImage # from cv_bridge import CvBridge, CvBridgeError import rosbag import os DEST = \"/path/to/folder/to/save/images\" BAG = \"/path/to/rosbag.bag\" #your camera topic: CAM = '/aero_downward_camera/image/compressed' def bag2msgs(): bag = rosbag.Bag(BAG) if bag is None: raise ValueError(\"no bag {}\".format(BAG)) msgs = [] for topic, msg, t in bag.read_messages(topics=[CAM]): msgs.append(msg) bag.close() print(\"MESSAGES: {}\".format(len(msgs))) return msgs def uncompress(msgs): imgs = [] for msg in msgs: #### direct conversion to CV2 #### np_arr = np.fromstring(msg.data, np.uint8) image_np = cv2.imdecode(np_arr, cv2.IMREAD_COLOR) # OpenCV >= 3.0: imgs.append(image_np) return imgs if __name__ == \"__main__\": if os.listdir(DEST) != []: raise ValueError('need empty directory for dest {}'.format(DEST)) msgs = bag2msgs() imgs = uncompress(msgs) for idx,im in enumerate(imgs): if idx % 50 == 0: print(idx) imname = \"frame{:05d}.jpg\".format(idx) cv2.imwrite(DEST + imname, im)","title":"MIT NEET Fall 2018"},{"location":"neet_fall_2018/#mit-neet-fall-2018","text":"","title":"MIT NEET Fall 2018"},{"location":"neet_fall_2018/#multiplex-ssh","text":"This is highly recommended for connecting to the drones: Create or edit a file in the .ssh/ directory inside your home directory, called config : $ nano ~/.ssh/config or $ gedit ~/.ssh/config or $ vi ~/.ssh/config (or whichever text editor you are comfortable with) You will need to add two lines to the file, and you will need to replace PATH_TO_HOME with the correct path for your platform: on linux, /home/YOURTEAMNAME/.ssh/ (or your username, if you are not using a team laptop) on mac, /Users/YOURUSERNAME/.ssh windows, (TODO) Add the following two lines ( Remember: change PATH_TO_HOME as specified above): ControlMaster auto ControlPath PATH_TO_HOME/.ssh/ssh_mux_%h_%p_%r Important - remember to start your FIRST SSH connection with -Y if you plan to use xforwarding (e.g., for rqt_image_view )","title":"Multiplex SSH"},{"location":"neet_fall_2018/#directory-setup","text":"These instructions replace this section on the website. On the SSH window on your team laptop, enter the following commands cd ~ cd ~/bwsi-uav/catkin_ws/src git clone https://github.com/BWSI-UAV/aero_control.git cd aero_control git remote add upstream https://github.com/BWSI-UAV/aero_control.git cd ~/bwsi-uav git clone https://github.com/BWSI-UAV/laboratory.git cd laboratory git remote add upstream https://github.com/BWSI-UAV/laboratory.git cd ~/bwsi-uav git clone https://github.com/BWSI-UAV/documents.git cd documents git remote add upstream https://github.com/BWSI-UAV/documents.git","title":"Directory Setup"},{"location":"neet_fall_2018/#compressed-camera-feeds","text":"To find if your drone supports compressed camera feeds: Start roscore Start optical flow: sudo -E ~/bwsi-uav/catkin-ws/src/aero-optical-flow/build/aero-optical-flow $ rostopic list | grep compressed If you don't see /aero_downward_camera/image/compressed in the results you will need to install compressed transport support: sudo apt-get install ros-kinetic-image-transport-plugins then restart your camera feed by restarting the aero-optical-flow binary (step 1 above). To record a compressed downward camera feed: $ cd ~/rosbags/ # or wherever you want to store your rosbag $ time rosbag record -O downward /aero_downward_camera/image/compressed # -O specifies the filename You can then SCP your rosbag to your team laptop. To convert compressed camera messages to OpenCV images, you can't use CVBridge. Here is an OpenCV-specific decoding solution. (You could also use CompressedImage from sensor_msgs.msg ): from __future__ import print_function import cv2 import numpy as np import roslib import rospy from sensor_msgs.msg import CompressedImage # We do not use cv_bridge since it does not support CompressedImage # from cv_bridge import CvBridge, CvBridgeError import rosbag import os DEST = \"/path/to/folder/to/save/images\" BAG = \"/path/to/rosbag.bag\" #your camera topic: CAM = '/aero_downward_camera/image/compressed' def bag2msgs(): bag = rosbag.Bag(BAG) if bag is None: raise ValueError(\"no bag {}\".format(BAG)) msgs = [] for topic, msg, t in bag.read_messages(topics=[CAM]): msgs.append(msg) bag.close() print(\"MESSAGES: {}\".format(len(msgs))) return msgs def uncompress(msgs): imgs = [] for msg in msgs: #### direct conversion to CV2 #### np_arr = np.fromstring(msg.data, np.uint8) image_np = cv2.imdecode(np_arr, cv2.IMREAD_COLOR) # OpenCV >= 3.0: imgs.append(image_np) return imgs if __name__ == \"__main__\": if os.listdir(DEST) != []: raise ValueError('need empty directory for dest {}'.format(DEST)) msgs = bag2msgs() imgs = uncompress(msgs) for idx,im in enumerate(imgs): if idx % 50 == 0: print(idx) imname = \"frame{:05d}.jpg\".format(idx) cv2.imwrite(DEST + imname, im)","title":"Compressed Camera Feeds"},{"location":"resources/","text":"Resources You can contribute to this list! Do you have tips, resources, or corrections to add? Did you find something frustrating or unhelpful and want to remove it? Notice any typos? Pull-requests welcome! Submit one at https://github.com/mmaz/neet UAV Course website: http://neet.beaver.works If this is your first time using a shell, git, or ssh, here are a few tutorials to help acquaint yourself with the basics. Tip: 2x speed videos On youtube, click the gear icon and change the playback speed to 2x, which is useful when watching slower-paced videos. Python MIT's own intro to python and programming course is a good place to review python basics, such as branching, iteration, and lists. Videos are also here: youtube playlist The Shell The shell (aka, command line or terminal) is how we connect to the UAV. Shell basics: https://www.youtube.com/watch?v=poT5Yd0Ag8I https://www.youtube.com/watch?v=oxuRxtrO2Ag https://www.digitalocean.com/community/tutorials/how-to-use-cd-pwd-and-ls-to-explore-the-file-system-on-a-linux-server Some useful commands to learn are: ls, cd, pwd, find, grep, mkdir, rm, mv, cp, less, cat, which Shell operators like | (the pipe symbol) and > as well as control signals, like Ctrl+C , are also useful to know. You may need to occasionally find your IP address and check for network reachability. Some useful commands for this: ping, ifconfig, wget, curl For example, $ ping drone.beaver.works I often find my IP address with the following command: ifconfig | grep inet How does this work? ifconfig spits out a lot of network configuration information. The | symbol pipes the output of ifconfig to grep , which searches for the word 'inet' on each line in the output. This corresponds to a list of IP addresses associated with my computer. On linux you can also use hostname -I \u2013 in general there can be many ways to find the same information using the command line, with different tradeoffs. This cheatsheet (or others, just google for 'bash cheat sheet') may come in handy: https://gist.github.com/LeCoupa/122b12050f5fb267e75f SSH and SCP: https://www.youtube.com/watch?v=rm6pewTcSro Git https://www.youtube.com/watch?v=zbKdDsNNOhg (answers to \u201cwhy use Git in the first place?\u201d) https://www.youtube.com/watch?v=3a2x1iJFJWc https://youtu.be/9pa_PV2LUlw Writing Python code You\u2019ll want to pick a code editor. Visual Studio Code, Sublime, Atom, GEdit, vim, and emacs are all popular choices. https://code.visualstudio.com/ is easy to install and configure, available on all platforms, and free. ROS (Robot Operating System) One-hour introduction to ROS: https://www.youtube.com/watch?v=0BxVPCInS3M","title":"Resources"},{"location":"resources/#resources","text":"You can contribute to this list! Do you have tips, resources, or corrections to add? Did you find something frustrating or unhelpful and want to remove it? Notice any typos? Pull-requests welcome! Submit one at https://github.com/mmaz/neet UAV Course website: http://neet.beaver.works If this is your first time using a shell, git, or ssh, here are a few tutorials to help acquaint yourself with the basics. Tip: 2x speed videos On youtube, click the gear icon and change the playback speed to 2x, which is useful when watching slower-paced videos.","title":"Resources"},{"location":"resources/#python","text":"MIT's own intro to python and programming course is a good place to review python basics, such as branching, iteration, and lists. Videos are also here: youtube playlist","title":"Python"},{"location":"resources/#the-shell","text":"The shell (aka, command line or terminal) is how we connect to the UAV. Shell basics: https://www.youtube.com/watch?v=poT5Yd0Ag8I https://www.youtube.com/watch?v=oxuRxtrO2Ag https://www.digitalocean.com/community/tutorials/how-to-use-cd-pwd-and-ls-to-explore-the-file-system-on-a-linux-server Some useful commands to learn are: ls, cd, pwd, find, grep, mkdir, rm, mv, cp, less, cat, which Shell operators like | (the pipe symbol) and > as well as control signals, like Ctrl+C , are also useful to know. You may need to occasionally find your IP address and check for network reachability. Some useful commands for this: ping, ifconfig, wget, curl For example, $ ping drone.beaver.works I often find my IP address with the following command: ifconfig | grep inet How does this work? ifconfig spits out a lot of network configuration information. The | symbol pipes the output of ifconfig to grep , which searches for the word 'inet' on each line in the output. This corresponds to a list of IP addresses associated with my computer. On linux you can also use hostname -I \u2013 in general there can be many ways to find the same information using the command line, with different tradeoffs. This cheatsheet (or others, just google for 'bash cheat sheet') may come in handy: https://gist.github.com/LeCoupa/122b12050f5fb267e75f","title":"The Shell"},{"location":"resources/#ssh-and-scp","text":"https://www.youtube.com/watch?v=rm6pewTcSro","title":"SSH and SCP:"},{"location":"resources/#git","text":"https://www.youtube.com/watch?v=zbKdDsNNOhg (answers to \u201cwhy use Git in the first place?\u201d) https://www.youtube.com/watch?v=3a2x1iJFJWc https://youtu.be/9pa_PV2LUlw","title":"Git"},{"location":"resources/#writing-python-code","text":"You\u2019ll want to pick a code editor. Visual Studio Code, Sublime, Atom, GEdit, vim, and emacs are all popular choices. https://code.visualstudio.com/ is easy to install and configure, available on all platforms, and free.","title":"Writing Python code"},{"location":"resources/#ros-robot-operating-system","text":"One-hour introduction to ROS: https://www.youtube.com/watch?v=0BxVPCInS3M","title":"ROS (Robot Operating System)"}]}